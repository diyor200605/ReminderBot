import asyncio
import logging
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from database import reminder, init_db
from kb import kb_main, kb_focus
from aiogram.types import BotCommand
from database import init_focus, focus
from database import get_focus_stats

logging.basicConfig(level=logging.INFO)

API_TOKEN = '8095807426:AAEaZh6Sg6fFaFf_xmU9RuNp6Q-vc37CmBg'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
scheduler = AsyncIOScheduler()

user_data = {}
user_start_time = {}
focus_sessions = {}

async def set_commands():
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
    ]
    await bot.set_my_commands(commands)
    

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–∞—Å.", reply_markup=kb_main)

@router.message(Command("info"))
async def cmd_info(message: types.Message):
    await message.answer("–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–∞—Å.")



@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_reminder(message: types.Message):
    await message.answer("–ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?")
    user_data[message.from_user.id] = {"step": "text"}


@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def view_reminders(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì.–ú–ú.–î–î), —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏.")
    user_data[message.from_user.id] = {"step": "check_tasks"}



@router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å")
async def daily_schedule(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì.–ú–ú.–î–î), —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
    user_data[message.from_user.id] = {"step": "schedule"}

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics(message: types.Message):
    try:
        with sqlite3.connect("reminders.db") as conn:
            cur = conn.cursor()
            cur.execute("SELECT COUNT(*) FROM reminders WHERE user_id = ?", (message.from_user.id,))
            count = cur.fetchone()[0]

 
        total_sessions, total_time, avg_duration = get_focus_stats(message.from_user.id)

 
        text = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n- –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {count}\n\n"

        if total_sessions == 0:
            text += "üò¥ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π."
        else:
            total_hours, total_minutes = divmod(int(total_time.total_seconds()) // 60, 60)
            avg_minutes = int(avg_duration.total_seconds() // 60)

            text += (
                "üéØ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏:\n\n"
                f"- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: {avg_minutes} –º–∏–Ω\n"
                f"- –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: {total_sessions} —Å–µ—Å—Å–∏–π\n"
                f"- –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {total_hours} —á {total_minutes} –º–∏–Ω\n"
            )

        await message.answer(text, reply_markup=kb_main)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    




@router.message(F.text == "üéØ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è")
async def focus_session(message: types.Message):
    await message.answer("üéØ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è", reply_markup=kb_focus)


@router.message(F.text == "–°—Ç–∞—Ä—Ç‚úÖ")
async def start_focus_session(message: types.Message):
    user_id = message.from_user.id
    user_start_time[user_id] = datetime.now()
    await message.answer("‚è±Ô∏è –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏ –°—Ç–æ–ø‚ùóÔ∏è —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å.", reply_markup=kb_focus)


@router.message(F.text == "–°—Ç–æ–ø‚ùóÔ∏è")
async def stop_focus_session(message: types.Message):
    user_id = message.from_user.id
    start = user_start_time.get(user_id)

    if not start:
        await message.answer("‚ùóÔ∏è –¢–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ –°—Ç–∞—Ä—Ç‚úÖ.", reply_markup=kb_focus)
        return

    end = datetime.now()
    duration = end - start
    hours, remainder = divmod(int(duration.total_seconds()), 3600)
    minutes, seconds = divmod(remainder, 60)


    save_focus_session(user_id, start, end)

    del user_start_time[user_id]

    await message.answer(
        f"‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º {seconds}—Å",
        reply_markup=kb_main
    )

@router.message(F.text == "–ù–∞–∑–∞–¥üîô")
async def back_to_main(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data:
        del user_data[user_id]
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb_main)
        


    

@router.message()
async def universal_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        return
    step = user_data[user_id]["step"]

    if step == "text":
        user_data[user_id]["text"] = message.text
        user_data[user_id]["step"] = "date"
        await message.answer("–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì.–ú–ú.–î–î)")
        return

    elif step == "date":
        try:
            date = datetime.strptime(message.text, "%Y.%m.%d").date()
            user_data[user_id]["date"] = date
            user_data[user_id]["step"] = "time"
            await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú)")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 2025.10.12")
        return

    elif step == "time":
        try:
            time = datetime.strptime(message.text, "%H:%M").time()
            reminder_time = datetime.combine(user_data[user_id]["date"], time)
            if reminder_time < datetime.now():
                await message.answer("‚è∞ –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
                return
            text = user_data[user_id]["text"]
            date_str = user_data[user_id]["date"].strftime("%Y-%m-%d")
            time_str = time.strftime("%H:%M")
            reminder(user_id, text, date_str, time_str)
            scheduler.add_job(send_reminder, 'date', run_date=reminder_time, args=[user_id, text])
            await message.answer(
                "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n\n"
                f"üìÖ –î–∞—Ç–∞: {date_str}\n"
                f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
                f"üìù –¢–µ–∫—Å—Ç: {text}",
                reply_markup=kb_main
            )
            del user_data[user_id]
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 12:30")
        return

    elif step == "check_tasks":
        try:
            date = datetime.strptime(message.text, "%Y.%m.%d").date()
            with sqlite3.connect("reminders.db") as conn:
                cur = conn.cursor()
                cur.execute("SELECT text, time FROM reminders WHERE date = ?", (date.strftime("%Y-%m-%d"),))
                reminders = cur.fetchall()
            if reminders:
                msg = "\n\n".join([f"‚è∞ {t} ‚Äî {txt}" for txt, t in reminders])
                await message.answer(f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ {date}:\n\n{msg}")
            else:
                await message.answer("‚ùå –ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 2025.10.12")
        del user_data[user_id]
        return

    elif step == "schedule":
        try:
            date = datetime.strptime(message.text, "%Y.%m.%d").date()
            with sqlite3.connect("reminders.db") as conn:
                cur = conn.cursor()
                cur.execute("SELECT time, text FROM reminders WHERE date = ?", (date.strftime("%Y-%m-%d"),))
                reminders = cur.fetchall()
            if reminders:
                msg = "\n".join([f"{t} ‚Äî {txt}" for t, txt in reminders])
                await message.answer(f"üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date}:\n\n{msg}")
            else:
                await message.answer("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 2025.10.12")
        del user_data[user_id]
        return



async def send_reminder(user_id, text):
    try:
        await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n{text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def main():
    init_db()
    init_focus()
    scheduler.start()
    dp.include_router(router)
    await set_commands()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())